---
import { type CollectionEntry } from 'astro:content';
import { ViewTransitions } from 'astro:transitions';

import Footer from '@/partials/Footer.astro';
import Navbar from '@/partials/Navbar.astro';
import Seo from '@/partials/Seo.astro';
import { AppConfig } from '@/utils/app-config';

export interface Props {
  head: {
    title: string;
    description: string;
    data?: CollectionEntry<'blog'>;
    robots?: boolean;
    imageSrc?: CollectionEntry<'blog'>['data']['imgSrc'];
    imageAlt?: string;
  };
}

const {
  head: { title, description, data, robots, imageSrc, imageAlt },
} = Astro.props as Props;
---

<html lang="en" scroll-smooth>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <meta name="author" content={AppConfig.author} />

    <link rel="alternate" type="application/rss+xml" href="/rss.xml" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <Seo {title} {description} url={Astro.url} {imageSrc} {imageAlt} {data} {robots} />
    <script is:inline>
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      })();
      function changeTheme() {
        const root = document.documentElement;
        root.classList[theme === 'dark' ? 'add' : 'remove']('dark');

        if (typeof localStorage !== 'undefined') {
          const observer = new MutationObserver(() => {
            const isDark = root.classList.contains('dark');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
          });
          observer.observe(root, {
            attributes: true,
            attributeFilter: ['class'],
          });
        }
      }
      changeTheme();
      document.addEventListener('astro:after-swap', changeTheme);
    </script>
    <ViewTransitions />
    <style is:global>
      @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap');
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Poppins', sans-serif;
        scroll-behavior: smooth;
        color-scheme: dark;
      }
      :root {
        --primary: 197, 88%, 48%;
        --background: 150, 8% 95%;
        --foreground: 218, 22%, 7%;
      }
      ::selection {
        background: hsl(var(--primary));
      }

      .dark {
        --background: 240, 57%, 5%;
        --foreground: 0 0% 98%;
      }

      .animate-delay-2000 {
        -webkit-animation-delay: 2s;
        animation-delay: 2s;
      }
      .animate-fill-forwards {
        -webkit-animation-fill-mode: forwards;
        animation-fill-mode: forwards;
      }

      ::view-transition-old(root),
      ::view-transition-new(root) {
        animation: none;
        mix-blend-mode: normal;
      }

      .dark::view-transition-old(root) {
        z-index: 1;
      }
      .dark::view-transition-new(root) {
        z-index: 999;
      }

      ::view-transition-old(root) {
        z-index: 999;
      }
      ::view-transition-new(root) {
        z-index: 1;
      }
    </style>
  </head>

  <body
    class="bg-background bg-hero-light bg-cover text-foreground motion-safe:transition-all motion-safe:duration-200 motion-safe:ease-in dark:bg-hero-dark dark:bg-auto dark:bg-center dark:bg-repeat"
  >
    <Navbar />
    <slot />
    <Footer />
  </body>
</html>
